package pt.isel.leic.multicloudguardian.http.media

import org.springframework.http.HttpStatus
import org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE
import org.springframework.http.ResponseEntity
import pt.isel.leic.multicloudguardian.domain.user.components.Email
import pt.isel.leic.multicloudguardian.domain.user.components.Username
import java.net.URI

/**
 *  Represents a problem in the API
 * @param type A URI reference that identifies the problem type.
 * @param title A short, human-readable summary of the problem type.
 * @param status The HTTP status code generated by the origin server for this occurrence of the problem.
 * @param detail Optional human-readable explanation specific to this occurrence of the problem.
 * @param instance Optional URI reference that identifies the specific occurrence of the problem.
 */
class Problem(
    val type: URI,
    val title: String,
    val status: Int,
    val detail: String,
    val instance: URI? = null,
) {
    fun toResponse() =
        ResponseEntity
            .status(status)
            .header("Content-Type", MEDIA_TYPE)
            .header("Content-Language", LANGUAGE)
            .body<Any>(this)

    companion object {
        const val MEDIA_TYPE = APPLICATION_PROBLEM_JSON_VALUE
        const val LANGUAGE = "en"

        private const val BASE_URL =
            "https://github.com/saraiva22/Multi-Cloud-Guardian/tree/main/code/backend/docs/problems/"
        private const val DEFAULT_FOLDER = BASE_URL + "default/"
        private const val USER_FOLDER = BASE_URL + "user/"
        private const val TOKEN_FOLDER = BASE_URL + "token/"
        private const val FILE_FOLDER = BASE_URL + "file/"

        fun response(
            status: Int,
            problem: Problem,
        ) = ResponseEntity
            .status(status)
            .header("Content-Type", MEDIA_TYPE)
            .header("Content-Language", LANGUAGE)
            .body<Any>(problem)

        // Default
        val internalServerError = URI("${DEFAULT_FOLDER}internal-server-error")
        val badRequest = URI("${DEFAULT_FOLDER}bad-request")
        val invalidRequestContent = URI("${DEFAULT_FOLDER}invalid-request-content")

        // User
        private val usernameAlreadyExists = URI("${USER_FOLDER}username-already-exists")
        private val emailAlreadyExists = URI("${USER_FOLDER}email-already-exists")
        private val invalidInviteCode = URI("${USER_FOLDER}invalid-register-code")
        private val userNotFound = URI("${USER_FOLDER}user-not-found")
        private val usernameNotFound = URI("${USER_FOLDER}username-not-found")
        private val invalidEmail = URI("${USER_FOLDER}invalid-email")
        private val insecurePassword = URI("${USER_FOLDER}insecure-password")
        private val userOrPasswordAreInvalid = URI("${USER_FOLDER}user-or-password-are-invalid")

        // Token
        private val invalidToken = URI("${TOKEN_FOLDER}user-not-found")
        private val tokenNotRevoked = URI("${TOKEN_FOLDER}token-not-revoked")
        val unauthorizedRequest = URI("${TOKEN_FOLDER}unauthorized")

        // File
        private val invalidCreateFile = URI("${FILE_FOLDER}invalid-create-file")
        private val invalidFileCreation = URI("${FILE_FOLDER}invalid-file-creation")
        private val invalidCreationGlobalBucket = URI("${FILE_FOLDER}invalid-creation-global-bucket")
        private val invalidCreationStorage = URI("${FILE_FOLDER}invalid-creation-storage")
        private val invalidErrorCreatingContext = URI("${FILE_FOLDER}invalid-error-creating-context")
        private val invalidErrorUploadingBlob = URI("${FILE_FOLDER}invalid-error-uploading-blob")
        private val invalidCreateContext = URI("${FILE_FOLDER}invalid-create-context")
        private val invalidFileName = URI("${FILE_FOLDER}invalid-file-name")
        private val invalidCredential = URI("${FILE_FOLDER}invalid-credential")
        private val fileNotFound = URI("${FILE_FOLDER}file-not-found")
        private val invalidDownloadFile = URI("${FILE_FOLDER}invalid-download-file")
        private val invalidDecryptFile = URI("${FILE_FOLDER}invalid-decrypt-file")
        private val invalidEncryptFile = URI("${FILE_FOLDER}invalid-encrypt-file")
        private val invalidDeleteFile = URI("${FILE_FOLDER}invalid-delete-file")

        // Folder
        private val invalidFolderName = URI("${FILE_FOLDER}invalid-folder-name")
        private val invalidFolderCreation = URI("${FILE_FOLDER}invalid-folder-creation")
        private val folderNotFound = URI("${FILE_FOLDER}folder-not-found")
        private val folderNameAlreadyExists = URI("${FILE_FOLDER}folder-name-already-exists")
        private val invalidParentFolder = URI("${FILE_FOLDER}invalid-parent-folder")
        private val parentFolderNotFound = URI("${FILE_FOLDER}parent-folder-not-found")

        fun internalServerError(instance: URI?): ResponseEntity<*> =
            Problem(
                type = internalServerError,
                title = "Internal server error",
                status = HttpStatus.INTERNAL_SERVER_ERROR.value(),
                detail = "An intervale server error occured",
                instance = instance,
            ).toResponse()

        fun invalidRequestContent(errors: List<String>? = null): Problem =
            Problem(
                type = invalidRequestContent,
                title = "Invalid request content",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = errors?.joinToString(", ") ?: "Invalid request content",
                instance = invalidRequestContent,
            )

        fun unauthorizedRequest(instance: URI?): ResponseEntity<*> =
            Problem(
                type = unauthorizedRequest,
                title = "Unauthorized Request",
                status = HttpStatus.UNAUTHORIZED.value(),
                detail = "The request has not been applied because it lacks valid authentication credentials for the target resource.",
                instance = instance,
            ).toResponse()

        fun insecurePassword(instance: URI?): ResponseEntity<*> =
            Problem(
                type = insecurePassword,
                title = "Insecure password",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Password is insecure",
                instance = instance,
            ).toResponse()

        fun invalidToken(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidToken,
                title = "Invalid token",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid token",
                instance = instance,
            ).toResponse()

        fun passwordDoesNotMatch(instance: URI?): ResponseEntity<*> =
            Problem(
                type = userOrPasswordAreInvalid,
                title = "Password does not match",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Password supplied does not match the user's password",
                instance = instance,
            ).toResponse()

        fun tokenNotRevoked(
            instance: URI?,
            token: String,
        ): ResponseEntity<*> =
            Problem(
                type = tokenNotRevoked,
                title = "Token not revoked",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Token $token not revoked",
                instance = instance,
            ).toResponse()

        fun userNotFound(
            id: Int,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = userNotFound,
                title = "User not found",
                status = HttpStatus.NOT_FOUND.value(),
                detail = "User with given id: $id not found",
                instance = instance,
            ).toResponse()

        fun usernameAlreadyExists(
            username: Username,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = usernameAlreadyExists,
                title = "UserName already exists",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Give username ${username.value} already exists",
                instance = instance,
            ).toResponse()

        fun usernameNotFound(
            username: String,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = usernameNotFound,
                title = "UserName not found",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Give username $username not found",
                instance = instance,
            ).toResponse()

        fun emailAlreadyExists(
            email: Email,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = emailAlreadyExists,
                title = "Email already exists",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Give emails ${email.value} already exists",
                instance = instance,
            ).toResponse()

        fun invalidEmail(
            email: Email,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = invalidEmail,
                title = "Invalid email",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Email is invalid",
                instance = instance,
            ).toResponse()

        fun invalidFileCreation(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidCreateFile,
                title = "Invalid file creation",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid file creation",
                instance = instance,
            ).toResponse()

        fun invalidCreationGlobalBucket(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidCreationGlobalBucket,
                title = "Invalid creation global bucket",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid creation global bucket",
                instance = instance,
            ).toResponse()

        fun invalidCreationStorage(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidCreationStorage,
                title = "Invalid creation storage",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid creation storage",
                instance = instance,
            ).toResponse()

        fun invalidErrorCreatingContext(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidErrorCreatingContext,
                title = "Invalid error creating context",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid error creating context",
                instance = instance,
            ).toResponse()

        fun invalidErrorUploadingBlob(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidErrorUploadingBlob,
                title = "Invalid error uploading blob",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid error uploading blob",
                instance = instance,
            ).toResponse()

        fun invalidCreateContext(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidCreateContext,
                title = "Invalid create context",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid create context",
                instance = instance,
            ).toResponse()

        fun invalidFileName(
            fileName: String,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = invalidFileName,
                title = "Invalid file name",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid file $fileName already exists",
                instance = instance,
            ).toResponse()

        fun invalidCredential(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidCredential,
                title = "Invalid credential",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid credential",
                instance = instance,
            ).toResponse()

        fun fileNotFound(
            id: Int,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = fileNotFound,
                title = "File not found",
                status = HttpStatus.NOT_FOUND.value(),
                detail = "File $id not found",
                instance = instance,
            ).toResponse()

        fun invalidDownloadFile(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidDownloadFile,
                title = "Invalid download file",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid download file",
                instance = instance,
            ).toResponse()

        fun invalidDecryptFile(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidDecryptFile,
                title = "Invalid decrypt file",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid decrypt file",
                instance = instance,
            ).toResponse()

        fun invalidEncryptFile(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidEncryptFile,
                title = "Invalid encrypt file",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid encrypt file",
                instance = instance,
            ).toResponse()

        fun invalidDeleteFile(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidDeleteFile,
                title = "Invalid delete file",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid delete file",
                instance = instance,
            ).toResponse()

        fun folderNameAlreadyExists(
            folderName: String,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = folderNameAlreadyExists,
                title = "Folder name already exists",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Folder name $folderName already exists",
                instance = instance,
            ).toResponse()

        fun invalidFolderCreation(instance: URI?): ResponseEntity<*> =
            Problem(
                type = invalidFolderCreation,
                title = "Invalid folder creation",
                status = HttpStatus.BAD_REQUEST.value(),
                detail = "Invalid folder creation",
                instance = instance,
            ).toResponse()

        fun parentFolderNotFound(
            id: Int,
            instance: URI?,
        ): ResponseEntity<*> =
            Problem(
                type = parentFolderNotFound,
                title = "Parent folder not found",
                status = HttpStatus.NOT_FOUND.value(),
                detail = "Parent folder $id not found",
                instance = instance,
            ).toResponse()
    }
}
